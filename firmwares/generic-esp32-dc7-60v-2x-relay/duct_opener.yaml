########################
# Device Setup
########################

substitutions:
  device_id: duct-opener
  device_name: Duct Opener

esphome:
  name: "${device_id}"
  friendly_name: "${device_name}"
  on_boot:
    then:
      - cover.close: duct_cover

esp32:
  board: nodemcu-32s
  framework:
    type: arduino

########################
# Software Stack Setup
########################

# Enable logging
logger:

# Enable Home Assistant API
api:
  password: ""

ota:
  - platform: esphome
    password: ""

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: ${device_name} Hotspot
    password: !secret wifi_fallback_password

captive_portal:

text_sensor:
  - platform: wifi_info
    ip_address:
      name: "IP Address"

########################
# Hardware Setup
########################

status_led:
  pin:
    number: GPIO23
    inverted: true

i2c:
  sda: GPIO21
  scl: GPIO22
  scan: true

ads1115:
  - address: 0x48

sensor:

  # Extra sensor to keep track of plug uptime
  - platform: uptime
    name: "Uptime"
    filters:
      - lambda: return x / 3600;
    unit_of_measurement: "h"
    accuracy_decimals: 2

  # Extra sensor for WiFi signal
  - platform: wifi_signal
    name: "WiFi Signal"
    update_interval: 60s

  - platform: ads1115
    name: "CT ADC"
    id: ct_adc
    multiplexer: "A0_A1"
    gain: 0.512  # CT SCT013-050 is 1V RMS @ 50A, so for 25A, we can assume a 0.5V gain
    sample_rate: 128
    accuracy_decimals: 3
    # Read sensor every 100ms
    update_interval: 100ms
    filters:
      # Average 10 samples and update every 10 samples, so 1Hz at 100ms refresh
      - sliding_window_moving_average:
          window_size: 10
          send_every: 10
      # Send to HA only if the value changes more than that
      - delta: 0.001
      # Send to HA no matter what after this time
      - heartbeat: 60s

binary_sensor:
  - platform: gpio
    pin:
      number: GPIO0
      mode: INPUT_PULLUP
      inverted: True
    name: "Button"
    on_press:
      then:
        - button.press: duct_toggle_button

switch:
  - platform: gpio
    pin: GPIO16
    id: id_relay_open
    name: "Relay Open"
    restore_mode: ALWAYS_OFF
    internal: true

  - platform: gpio
    pin: GPIO17
    id: id_relay_close
    name: "Relay Close"
    restore_mode: ALWAYS_OFF
    internal: true

cover:
  - platform: time_based
    name: "Duct Cover"
    id: duct_cover
    open_action:
      - switch.turn_off: id_relay_close
      - switch.turn_on: id_relay_open
    open_duration: 23s

    close_action:
      - switch.turn_off: id_relay_open
      - switch.turn_on: id_relay_close
    close_duration: 23s

    stop_action:
      - switch.turn_off: id_relay_open
      - switch.turn_off: id_relay_close

button:
  - platform: template
    id: duct_toggle_button
    name: "Toggle Cover"
    on_press:
      then:
        - lambda: |-
            if (id(duct_cover).is_fully_open()) {
              id(duct_cover).make_call().set_command_close().perform();
            } else if (id(duct_cover).is_fully_closed()) {
              id(duct_cover).make_call().set_command_open().perform();
            } else {
              id(duct_cover).make_call().set_command_stop().perform();
            }
