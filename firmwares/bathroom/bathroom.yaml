########################
# Device Setup
########################

substitutions:
  device_id: bathroom1
  device_name: Bathroom 1

esphome:
  name: "${device_id}"
  friendly_name: "${device_name}"

esp32:
  board: nodemcu-32s
  framework:
    type: arduino

########################
# Software Stack Setup
########################

# Enable logging
logger:

# Enable Home Assistant API
api:
  password: ""

ota:
  password: ""

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: ${device_name} Hotspot
    password: !secret wifi_fallback_password

captive_portal:

text_sensor:
  - platform: wifi_info
    ip_address:
      name: "IP Address"

########################
# Hardware Setup
########################

status_led:
  pin:
    number: GPIO2

sensor:
  - platform: dht
    pin: GPIO13
    temperature:
      id: temperature
      name: "Temperature"
    humidity:
      id: humidity
      name: "Humidity"

  # Extra sensor to keep track of plug uptime
  - platform: uptime
    name: "Uptime"
    filters:
      - lambda: return x / 3600;
    unit_of_measurement: "h"
    accuracy_decimals: 2

  # Extra sensor for WiFi signal
  - platform: wifi_signal
    name: "WiFi Signal"
    update_interval: 60s

output:
  - platform: ledc
    id: motor_forward_pin
    pin: GPIO32
  - platform: ledc
    id: motor_reverse_pin
    pin: GPIO33
  - platform: ledc
    id: motor_enable
    pin: GPIO25

fan:
  - platform: hbridge
    id: h_bridge_driver
    pin_a: motor_forward_pin
    pin_b: motor_reverse_pin
    enable_pin: motor_enable
    decay_mode: slow
    icon: mdi:air-filter
    internal: true

cover:
  - platform: time_based
    id: vents
    name: "Vents"

    open_action:
      - fan.turn_on:
          id: h_bridge_driver
          direction: forward
          speed: 100
    open_duration: 28s

    close_action:
      - fan.turn_on:
          id: h_bridge_driver
          direction: reverse
          speed: 100
    close_duration: 28s

    stop_action:
      - fan.turn_off: h_bridge_driver

########################
# Automation Setup
########################

switch:
  - platform: template
    id: automation
    name: "Automation"
    optimistic: true
    restore_state: true

time:
  - platform: homeassistant
    id: timesrc
    on_time_sync:
      then:
        - logger.log: "Synchronized system clock"

    on_time:
      # Every minute
      - seconds: 0
        minutes: '*'
        then:
          - lambda: |-
              ESP_LOGD("automation", "%s", "Evaluating automation ...");

              if(!id(automation).state) {
                ESP_LOGD("automation", "%s", "Automation disabled! Abort!");
                return;
              }

              ESP_LOGD("automation", "%s", "Automation enabled! Executing ...");

              auto time = id(timesrc).now();
              if(!time.is_valid()) {
                ESP_LOGD("automation", "%s", "Time isn't valid yet. Differing automation ...");
                return;
              }

              // If some conditions are met, open the vents
              if(
                (id(vents).position == COVER_CLOSED) && (
                  (id(temperature).state >= 22.0) &&
                  (id(humidity).state >= 90.0) &&
                  (time.hour < 21)
                )
              ) {
                ESP_LOGD("automation", "%s", "Condition met! Opening the vents ...");

                auto call = id(vents).make_call();
                call.set_command_open();
                call.perform();

                return;
              }

              // If some conditions are met, close the vents
              if(
                (id(vents).position == COVER_OPEN) && (
                  (id(temperature).state <= 20.0) ||
                  (id(humidity).state <= 80.0) ||
                  (time.hour >= 21)
                )
              ) {
                ESP_LOGD("automation", "%s", "Condition met! Closing the vents ...");

                auto call = id(vents).make_call();
                call.set_command_close();
                call.perform();

                return;
              }

              ESP_LOGD("automation", "%s", "Nothing to do here. Ok Bueno Bye!");
