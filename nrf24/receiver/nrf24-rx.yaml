########################
# Device Setup
########################

substitutions:
  device_id: nrf24-rx
  device_name: NRF24 Receiver
  state_bounce: 2s
  ring_good: "good:d=8,o=5,b=140: c4, e4, g4, c5"
  ring_bad: "bad:d=8,o=5,b=100: c5, g4, e4, c4"

esphome:
  name: "${device_id}"
  friendly_name: "${device_name}"

  on_boot:
    priority: 600
    then:
      - lambda: |-
          id(gate_button_1).publish_state(false);
          id(gate_button_2).publish_state(false);
          id(gate_button_3).publish_state(false);

esp32:
  board: esp32dev
  framework:
    type: arduino

external_components:
  - source:
      type: local
      path: components

########################
# Software Stack Setup
########################

# Enable Logging
logger:

# Enable Home Assistant API
api:
  password: ""

  services:
    - service: play_rtttl
      variables:
        song: string
      then:
        - lambda: 'id(buzzer).play(song);'

ota:
  - password: ""
    platform: esphome

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: ${device_name} Hotspot
    password: !secret wifi_fallback_password

captive_portal:

text_sensor:
  - platform: wifi_info
    ip_address:
      name: "IP Address"

sensor:

  # Extra sensor to keep track of plug uptime
  - platform: uptime
    name: "Uptime"
    filters:
      - lambda: return x / 3600;
    unit_of_measurement: "h"
    accuracy_decimals: 2

  # Extra sensor for WiFi signal
  - platform: wifi_signal
    name: "WiFi Signal"
    update_interval: 60s

# Define Binary Sensors for Button Presses
binary_sensor:
  - platform: template
    id: gate_button_1
    name: "Gate Button 1"

    on_press:
      - delay: ${state_bounce}
      - lambda: |-
          id(gate_button_1).publish_state(false);

  - platform: template
    id: gate_button_2
    name: "Gate Button 2"

    on_press:
      - delay: ${state_bounce}
      - lambda: |-
          id(gate_button_2).publish_state(false);

  - platform: template
    id: gate_button_3
    name: "Gate Button 3"

    on_press:
      - delay: ${state_bounce}
      - lambda: |-
          id(gate_button_3).publish_state(false);

########################
# Hardware Setup
########################

# Enable board status LED
status_led:
  pin: GPIO2

# Output for Buzzer
output:
  - platform: ledc
    id: buzzer_output
    pin: GPIO25
    inverted: true

# RTTTL buzzer configuration
rtttl:
  id: buzzer
  output: buzzer_output

# SPI Bus Configuration
spi:
  clk_pin: GPIO14  # SCK
  mosi_pin: GPIO13 # MOSI
  miso_pin: GPIO12 # MISO

# Load NRF24 Component with User-Defined Callback
nrf24rx:
  ce_pin: GPIO4
  csn_pin: GPIO15
  irq_pin: GPIO27
  encryption_key: !secret nrf24_encryption_key
  on_receive:
    then:
      - lambda: |-
          if (message == "button_1") {
            id(gate_button_1).publish_state(true);
            id(buzzer).play("${ring_good}");
          } else if (message == "button_2") {
            id(gate_button_2).publish_state(true);
            id(buzzer).play("${ring_good}");
          } else if (message == "button_3") {
            id(gate_button_3).publish_state(true);
            id(buzzer).play("${ring_good}");
          } else {
            id(buzzer).play("${ring_bad}");
          }
